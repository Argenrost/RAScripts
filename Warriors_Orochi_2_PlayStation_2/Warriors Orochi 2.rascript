// Warriors Orochi 2
// #ID = 20782

ZHAO_YUN = 0x00
GUAN_YU = 0x01
ZHANG_FEI = 0x02
XIAHOU_DUN = 0x03
DIAN_WEI = 0x04
XU_ZHU = 0x05
ZHOU_YU = 0x06
LU_XUN = 0x07
TAISHI_CI = 0x08
DIAO_CHAN = 0x09
ZHUGE_LIANG = 0x0A
CAO_CAO = 0x0B
LU_BU = 0x0C
SUN_SHANG_XIANG = 0x0D
LIU_BEI = 0x0E
SUN_JIAN = 0x0F
SUN_QUAN = 0x10
DONG_ZHUO = 0x11
YUAN_SHAO = 0x12
MA_CHAO = 0x13
HUANG_ZHONG = 0x14
XIAHOU_YUAN = 0x15
ZHANG_LIAO = 0x16
SIMA_YI = 0x17
LU_MENG = 0x18
GAN_NING = 0x19
JIANG_WEI = 0x1A
ZHANG_JIAO = 0x1B
XU_HUANG = 0x1C
ZHANG_HE = 0x1D
ZHEN_JI = 0x1E
HUANG_GAI = 0x1F
SUN_CE = 0x20
WEI_YAN = 0x21
PANG_TONG = 0x22
MENG_HUO = 0x23
ZHU_RONG = 0x24
DA_QIAO = 0x25
XIAO_QIAO = 0x26
CAO_REN = 0x27
ZHOU_TAI = 0x28
YUE_YING = 0x29
CAO_PI = 0x2A
PANG_DE = 0x2B
LING_TONG = 0x2C
GUAN_PING = 0x2D
XING_CAI = 0x2E
ZUO_CI = 0x2F
YUKIMURA_SANADA = 0x30
KEIJI_MAEDA = 0x31
NOBUNAGA_ODA = 0x32
MITSUHIDE_AKECHI = 0x33
GOEMON_ISHIKAWA = 0x34
KENSHIN_UESAGI = 0x35
OICHI = 0x36
OKUNI = 0x37
KUNOICHI = 0x38
MAGOICHI_SAIKA = 0x39
SHINGEN_TAKEDA = 0x3A
MASAMUNE_DATE = 0x3B
NO = 0x3C
HANZO_HATTORI = 0x3D
RANMARU_MORI = 0x3E
HIDEYOSHI_HASHIBA = 0x3F
YOSHIMOTO_IMAGAWA = 0x40
TADAKATSU_HONDA = 0x41
INA = 0x42
IEYASU_TOKUGAWA = 0x43
MITSUNARI_ISHIDA = 0x44
NAGAMASA_AZAI = 0x45
SAKON_SHIMA = 0x46
YOSHIHIRO_SHIMAZU = 0x47
GINCHIYO_TACHIBANA = 0x48
KANETSUGU_NAOE = 0x49
NENE = 0x4A
KOTARO_FUMA = 0x4B
MUSASHI_MIYAMOTO = 0x4C
OROCHI = 0x4D
DA_JI = 0x4E
TAIGONG_WANG = 0x4F
SUN_WUKONG = 0x50
FU_XI = 0x51
NU_WA = 0x52
YOSHITSUNE_MINAMOTO = 0x53
KIYOMORI_TAIRA = 0x54
HIMIKO = 0x55
TOSHIIE_MAEDA = 0x56
MOTOCHIKA_CHOSOKABE = 0x57
GRACIA = 0x58
KOJIRO_SASAKI = 0x59
KATSUIE_SHIBATA = 0x5A
OROCHI_X = 0x5B
DODOMEKI = 0x5C
GYUKI = 0x5D
NO_CHARACTER1 = 0x5E
NO_CHARACTER2 = 0x5F

FIRST_CHARACTER = ZHAO_YUN
LAST_ABILITY_CHARACTER = KATSUIE_SHIBATA // No Orochi X Abilities
LAST_PROFICIENCY_CHARACTER = KATSUIE_SHIBATA 
LAST_WEAPON_CHARACTER = KATSUIE_SHIBATA
LAST_SURVIVAL_CHARACTER = GYUKI
DEFAULT_NO_CHARACTER = NO_CHARACTER2

abilityLookup =
{
    ZHAO_YUN: 0x0f, // 4 bit
    GUAN_YU: 0x0f,
    ZHANG_FEI: 0x0f,
    XIAHOU_DUN: 0x0f,
    DIAN_WEI: 0x0f,
    XU_ZHU: 0x0f,
    ZHOU_YU: 0x0f,
    LU_XUN: 0x0f,
    TAISHI_CI: 0x0f,
    DIAO_CHAN: 0x07,
    ZHUGE_LIANG: 0x0f,
    CAO_CAO: 0x07,
    LU_BU: 0x0f,
    SUN_SHANG_XIANG: 0x0f,
    LIU_BEI: 0x07, // 3 bit
    SUN_JIAN: 0x07,
    SUN_QUAN: 0x0f,
    DONG_ZHUO: 0x07,
    YUAN_SHAO: 0x0f,
    MA_CHAO: 0x0f,
    HUANG_ZHONG: 0x07,
    XIAHOU_YUAN: 0x0f,
    ZHANG_LIAO: 0x0f,
    SIMA_YI: 0x07,
    LU_MENG: 0x07,
    GAN_NING: 0x0f,
    JIANG_WEI: 0x0f,
    ZHANG_JIAO: 0x0f,
    XU_HUANG: 0x0f,
    ZHANG_HE: 0x07,
    ZHEN_JI: 0x07,
    HUANG_GAI: 0x0f,
    SUN_CE: 0x0f,
    WEI_YAN: 0x07,
    PANG_TONG: 0x0f,
    MENG_HUO: 0x0f,
    ZHU_RONG: 0x0f,
    DA_QIAO: 0x07,
    XIAO_QIAO: 0x07,
    CAO_REN: 0x07,
    ZHOU_TAI: 0x0f,
    YUE_YING: 0x0f,
    CAO_PI: 0x0f,
    PANG_DE: 0x0f,
    LING_TONG: 0x0f,
    GUAN_PING: 0x0f,
    XING_CAI: 0x0f,
    ZUO_CI: 0x0f,
    YUKIMURA_SANADA: 0x0f,
    KEIJI_MAEDA: 0x07,
    NOBUNAGA_ODA: 0x0f,
    MITSUHIDE_AKECHI: 0x0f,
    GOEMON_ISHIKAWA: 0x0f,
    KENSHIN_UESAGI: 0x0f,
    OICHI: 0x07,
    OKUNI: 0x0f,
    KUNOICHI: 0x07,
    MAGOICHI_SAIKA: 0x07,
    SHINGEN_TAKEDA: 0x0f,
    MASAMUNE_DATE: 0x07,
    NO: 0x07,
    HANZO_HATTORI: 0x0f,
    RANMARU_MORI: 0x0f,
    HIDEYOSHI_HASHIBA: 0x0f,
    YOSHIMOTO_IMAGAWA: 0x07,
    TADAKATSU_HONDA: 0x0f,
    INA: 0x07,
    IEYASU_TOKUGAWA: 0x0f,
    MITSUNARI_ISHIDA: 0x0f,
    NAGAMASA_AZAI: 0x0f,
    SAKON_SHIMA: 0x07,
    YOSHIHIRO_SHIMAZU: 0x0f,
    GINCHIYO_TACHIBANA: 0x0f,
    KANETSUGU_NAOE: 0x07,
    NENE: 0x0f,
    KOTARO_FUMA: 0x07,
    MUSASHI_MIYAMOTO: 0x07,
    OROCHI: 0x0f,
    DA_JI: 0x0f,
    TAIGONG_WANG: 0x07,
    SUN_WUKONG: 0x07,
    FU_XI: 0x07,
    NU_WA: 0x07,
    YOSHITSUNE_MINAMOTO: 0x07,
    KIYOMORI_TAIRA: 0x07,
    HIMIKO: 0x03, // 2 bits! WOW!
    TOSHIIE_MAEDA: 0x07,
    MOTOCHIKA_CHOSOKABE: 0x07,
    GRACIA: 0x07,
    KOJIRO_SASAKI: 0x07,
    KATSUIE_SHIBATA: 0x07,
}

TOTAL_STAGE_COUNT = 8
SHU_STAGE_1_ID = 0x00
SHU_STAGE_2_ID = 0x01
SHU_STAGE_3_ID = 0x02
SHU_STAGE_4_ID = 0x03
SHU_STAGE_5_ID = 0x04
SHU_STAGE_6_ID = 0x05
SHU_STAGE_7_ID = 0x06
SHU_STAGE_8_ID = 0x07

WEI_STAGE_1_ID = 0x08
WEI_STAGE_2_ID = 0x09
WEI_STAGE_3_ID = 0x0A
WEI_STAGE_4_ID = 0x0B
WEI_STAGE_5_ID = 0x0C
WEI_STAGE_6_ID = 0x0D
WEI_STAGE_7_ID = 0x0E
WEI_STAGE_8_ID = 0x0F

WU_STAGE_1_ID = 0x10
WU_STAGE_2_ID = 0x11
WU_STAGE_3_ID = 0x12
WU_STAGE_4_ID = 0x13
WU_STAGE_5_ID = 0x14
WU_STAGE_6_ID = 0x15
WU_STAGE_7_ID = 0x16
WU_STAGE_8_ID = 0x17

SW_STAGE_1_ID = 0x18
SW_STAGE_2_ID = 0x19
SW_STAGE_3_ID = 0x1A
SW_STAGE_4_ID = 0x1B
SW_STAGE_5_ID = 0x1C
SW_STAGE_6_ID = 0x1D
SW_STAGE_7_ID = 0x1E
SW_STAGE_8_ID = 0x1F

OROCHI_STAGE_1_ID = 0x20
OROCHI_STAGE_2_ID = 0x21
OROCHI_STAGE_3_ID = 0x22
OROCHI_STAGE_4_ID = 0x23
OROCHI_STAGE_5_ID = 0x24
OROCHI_STAGE_6_ID = 0x25
OROCHI_STAGE_7_ID = 0x26
OROCHI_STAGE_8_ID = 0x27

DREAM_STAGE_1_ID = 0x28
DREAM_STAGE_2_ID = 0x29
DREAM_STAGE_3_ID = 0x2A
DREAM_STAGE_4_ID = 0x2B
DREAM_STAGE_5_ID = 0x2C
DREAM_STAGE_6_ID = 0x2D
DREAM_STAGE_7_ID = 0x2E
DREAM_STAGE_8_ID = 0x2F
DREAM_STAGE_9_ID = 0x30
DREAM_STAGE_10_ID = 0x31
DREAM_STAGE_11_ID = 0x32
DREAM_STAGE_12_ID = 0x33
DREAM_STAGE_13_ID = 0x34
DREAM_STAGE_14_ID = 0x35
DREAM_STAGE_15_ID = 0x36
DREAM_STAGE_16_ID = 0x37
DREAM_STAGE_17_ID = 0x38
DREAM_STAGE_18_ID = 0x39
DREAM_STAGE_19_ID = 0x3A
DREAM_STAGE_20_ID = 0x3B
DREAM_STAGE_21_ID = 0x3C
DREAM_STAGE_22_ID = 0x3D
DREAM_STAGE_23_ID = 0x3E
DREAM_STAGE_24_ID = 0x3F
DREAM_STAGE_25_ID = 0x40
DREAM_STAGE_26_ID = 0x41
DREAM_STAGE_27_ID = 0x42
DREAM_STAGE_28_ID = 0x43

DREAM_STAGE_COUNT = (8*3)+4

characterNameLookup ={
    ZHAO_YUN: "Zhao Yun",
    GUAN_YU: "Guan Yu",
    ZHANG_FEI: "Zhang Fei",
    XIAHOU_DUN: "Xiahou Dun",
    DIAN_WEI: "Dian Wei",
    XU_ZHU: "Xu Zhu",
    ZHOU_YU: "Zhou Yu",
    LU_XUN: "Lu Xun",
    TAISHI_CI: "Taishi Ci",
    DIAO_CHAN: "Diao Chan",
    ZHUGE_LIANG: "Zhuge Liang",
    CAO_CAO: "Cao Cao",
    LU_BU: "Lu Bu",
    SUN_SHANG_XIANG: "Sun Shang Xiang",
    LIU_BEI: "Liu Bei",
    SUN_JIAN: "Sun Jian",
    SUN_QUAN: "Sun Quan",
    DONG_ZHUO: "Dong Zhuo",
    YUAN_SHAO: "Yuan Shao",
    MA_CHAO: "Ma Chao",
    HUANG_ZHONG: "Huang Zhong",
    XIAHOU_YUAN: "Xiahou Yuan",
    ZHANG_LIAO: "Zhang Liao",
    SIMA_YI: "Sima Yi",
    LU_MENG: "Lu Meng",
    GAN_NING: "Gan Ning",
    JIANG_WEI: "Jiang Wei",
    ZHANG_JIAO: "Zhang Jiao",
    XU_HUANG: "Xu Huang",
    ZHANG_HE: "Zhang He",
    ZHEN_JI: "Zhen Ji",
    HUANG_GAI: "Huang Gai",
    SUN_CE: "Sun Ce",
    WEI_YAN: "Wei Yan",
    PANG_TONG: "Pang Tong",
    MENG_HUO: "Meng Huo",
    ZHU_RONG: "Zhu Rong",
    DA_QIAO: "Da Qiao",
    XIAO_QIAO: "Xiao Qiao",
    CAO_REN: "Cao Ren",
    ZHOU_TAI: "Zhou Tai",
    YUE_YING: "Yue Ying",
    CAO_PI: "Cao Pi",
    PANG_DE: "Pang De",
    LING_TONG: "Ling Tong",
    GUAN_PING: "Guan Ping",
    XING_CAI: "Xing Cai",
    ZUO_CI: "Zuo Ci",
    YUKIMURA_SANADA: "Yukimura Sanada",
    KEIJI_MAEDA: "Keiji Maeda",
    NOBUNAGA_ODA: "Nobunaga Oda",
    MITSUHIDE_AKECHI: "Mitsuhide Akechi",
    GOEMON_ISHIKAWA: "Goemon Ishikawa",
    KENSHIN_UESAGI: "Kenshin Uesagi",
    OICHI: "Oichi",
    OKUNI: "Okuni",
    KUNOICHI: "Kunoichi",
    MAGOICHI_SAIKA: "Magoichi Saika",
    SHINGEN_TAKEDA: "Shingen Takeda",
    MASAMUNE_DATE: "Masamune Date",
    NO: "No",
    HANZO_HATTORI: "Hanzo Hattori",
    RANMARU_MORI: "Ranmaru Mori",
    HIDEYOSHI_HASHIBA: "Hideyoshi Hashiba",
    YOSHIMOTO_IMAGAWA: "Yoshimoto Imagawa",
    TADAKATSU_HONDA: "Tadakatsu Honda",
    INA: "Ina",
    IEYASU_TOKUGAWA: "Ieyasu Tokugawa",
    MITSUNARI_ISHIDA: "Mitsunari Ishida",
    NAGAMASA_AZAI: "Nagamasa Azai",
    SAKON_SHIMA: "Sakon Shima",
    YOSHIHIRO_SHIMAZU: "Yoshihiro Shimazu",
    GINCHIYO_TACHIBANA: "Ginchiyo Tachibana",
    KANETSUGU_NAOE: "Kanetsugu Naoe",
    NENE: "Nene",
    KOTARO_FUMA: "Kotaro Fuma",
    MUSASHI_MIYAMOTO: "Musashi Miyamoto",
    OROCHI: "Orochi",
    DA_JI: "Da Ji",
    TAIGONG_WANG: "Taigong Wang",
    SUN_WUKONG: "Sun Wukong",
    FU_XI: "Fu Xi",
    NU_WA: "Nu Wa",
    YOSHITSUNE_MINAMOTO: "Yoshitsune Minamoto",
    KIYOMORI_TAIRA: "Kiyomori Taira",
    HIMIKO: "Himiko",
    TOSHIIE_MAEDA: "Toshiie Maeda",
    MOTOCHIKA_CHOSOKABE: "Motochika Chosokabe",
    GRACIA: "Gracia",
    KOJIRO_SASAKI: "Kojiro Sasaki",
    KATSUIE_SHIBATA: "Katsuie Shibata",
    OROCHI_X: "Orochi X",
    DODOMEKI: "Dodomeki",
    GYUKI: "Gyuki",
    NO_CHARACTER1: "No Character",
    NO_CHARACTER2: "No Character"
}

stageNameLookup = characterNameLookup
weaponNameLookup ={
    ZHAO_YUN: "Fierce Dragon",
    GUAN_YU: "Blue Moon Dragon",
    ZHANG_FEI: "Viper Blade",
    XIAHOU_DUN: "Kirin Fang",
    DIAN_WEI: "Mad Bull",
    XU_ZHU: "Stone Crusher",
    ZHOU_YU: "Ancients Sword",
    LU_XUN: "Falcon",
    TAISHI_CI: "Tiger Slayer",
    DIAO_CHAN: "Diva",
    ZHUGE_LIANG: "Peacock Feather",
    CAO_CAO: "Wrath of Heaven",
    LU_BU: "Sky Scorcher",
    SUN_SHANG_XIANG: "Sol Chakram",
    LIU_BEI: "Gold Moon Dragon",
    SUN_JIAN: "Savage Tiger",
    SUN_QUAN: "Master Wolf",
    DONG_ZHUO: "Horror",
    YUAN_SHAO: "Sword of Kings",
    MA_CHAO: "Stallion Fury",
    HUANG_ZHONG: "Oracle Sword",
    XIAHOU_YUAN: "Enforcer Rod",
    ZHANG_LIAO: "Gold Wyvern",
    SIMA_YI: "Dark Feather",
    LU_MENG: "White Tiger",
    GAN_NING: "Sea Master",
    JIANG_WEI: "Blink",
    ZHANG_JIAO: "Volcano Staff",
    XU_HUANG: "Marauder",
    ZHANG_HE: "Phoenix Talon",
    ZHEN_JI: "Dark Moon Flute",
    HUANG_GAI: "Dark Shadow",
    SUN_CE: "Overlord",
    WEI_YAN: "Comet Strike",
    PANG_TONG: "Tornado Staff",
    MENG_HUO: "King of Beasts",
    ZHU_RONG: "Inferno",
    DA_QIAO: "Qiao Beauty",
    XIAO_QIAO: "Qiao Grace",
    CAO_REN: "Roc",
    ZHOU_TAI: "Dusk",
    YUE_YING: "Oblivion",
    CAO_PI: "Chaos",
    PANG_DE: "Heavenly Halberd",
    LING_TONG: "Dragon Fury",
    GUAN_PING: "Young Dragon",
    XING_CAI: "Ambition",
    ZUO_CI: "Trump Deck",
    YUKIMURA_SANADA: "Dragon's Tail",
    KEIJI_MAEDA: "Divine Mandible",
    NOBUNAGA_ODA: "Demon Regalia",
    MITSUHIDE_AKECHI: "Gilded Talon",
    GOEMON_ISHIKAWA: "Kai-Basara",
    KENSHIN_UESAGI: "Frozen Flame",
    OICHI: "Cup & Gold",
    OKUNI: "Raging Sun",
    KUNOICHI: "Shiranui",
    MAGOICHI_SAIKA: "Marksman's Pride",
    SHINGEN_TAKEDA: "Heaven's Sign",
    MASAMUNE_DATE: "Manhunters",
    NO: "Delicious Venom",
    HANZO_HATTORI: "Chained Dragon",
    RANMARU_MORI: "Iron Vegeance",
    HIDEYOSHI_HASHIBA: "Simian Sansetsu",
    YOSHIMOTO_IMAGAWA: "Velvet Kemari",
    TADAKATSU_HONDA: "Tonbo-giri",
    INA: "Coiled Viper",
    IEYASU_TOKUGAWA: "Quake Maker",
    MITSUNARI_ISHIDA: "Golden Frill",
    NAGAMASA_AZAI: "King's Honor",
    SAKON_SHIMA: "Wrecking Blade",
    YOSHIHIRO_SHIMAZU: "Beast Crusher",
    GINCHIYO_TACHIBANA: "Heaven's Bite",
    KANETSUGU_NAOE: "Evil's Bane",
    NENE: "Devil Feathers",
    KOTARO_FUMA: "Thorns of Peril",
    MUSASHI_MIYAMOTO: "Mastery & Vision",
    OROCHI: "Eternal Agony",
    DA_JI: "Orbs of Ruin",
    TAIGONG_WANG: "Lightning Rod",
    SUN_WUKONG: "Jingu Staff",
    FU_XI: "Fu Xi's Sword",
    NU_WA: "Nu Wa's Rapier",
    YOSHITSUNE_MINAMOTO: "Sun Gauntlet",
    KIYOMORI_TAIRA: "Tyranny",
    HIMIKO: "Amaterasu",
    TOSHIIE_MAEDA: "Dragon's Bite",
    MOTOCHIKA_CHOSOKABE: "Golden Ginkgo",
    GRACIA: "Sacred Grace",
    KOJIRO_SASAKI: "Deathly Shadow",
    KATSUIE_SHIBATA: "Heaven and Earth"
}

stageNameLookup = {
    SHU_STAGE_1_ID: "Battle of Shi Ting",
    SHU_STAGE_2_ID: "Battle of Saika",
    SHU_STAGE_3_ID: "Battle of Nagashino",
    SHU_STAGE_4_ID: "Battle of Wuhang Mountains",
    SHU_STAGE_5_ID: "Battle of Jia Meng Gate",
    SHU_STAGE_6_ID: "Battle of Odani Castle",
    SHU_STAGE_7_ID: "Battle of Koshi Castle",
    SHU_STAGE_8_ID: "Battle of Wu Zhang Plains",
    WEI_STAGE_1_ID: "Battle of Si Province",
    WEI_STAGE_2_ID: "Battle of Si Shui Gate",
    WEI_STAGE_3_ID: "Battle of Shizugatake",
    WEI_STAGE_4_ID: "Battle of Ji Castle",
    WEI_STAGE_5_ID: "Battle of Komaki-Nagakute",
    WEI_STAGE_6_ID: "Battle of Yamatai",
    WEI_STAGE_7_ID: "Battle of Tong Gate",
    WEI_STAGE_8_ID: "Battle of Guan Du",
    WU_STAGE_1_ID: "Battle of Ru Xu Kou",
    WU_STAGE_2_ID: "Battle of Kanegasaki",
    WU_STAGE_3_ID: "Battle of Nan Zhong",
    WU_STAGE_4_ID: "Battle of Itsukushima",
    WU_STAGE_5_ID: "Battle of Okehazama",
    WU_STAGE_6_ID: "Battle of Yang Ping Gate",
    WU_STAGE_7_ID: "Battle of Yamazaki",
    WU_STAGE_8_ID: "Battle of Chi Bi",
    SW_STAGE_1_ID: "Battle of Lou Sang Village",
    SW_STAGE_2_ID: "Battle of Ji Province",
    SW_STAGE_3_ID: "Rescue at Hasedo",
    SW_STAGE_4_ID: "Battle of Chang Ban",
    SW_STAGE_5_ID: "Battle of Liang Province",
    SW_STAGE_6_ID: "Battle of Hu Lao Gate",
    SW_STAGE_7_ID: "Battle of Bai Di Castle",
    SW_STAGE_8_ID: "Battle of Sekigahara",
    OROCHI_STAGE_1_ID: "Battle of Odwara Castle",
    OROCHI_STAGE_2_ID: "Battle of Cheng Du",
    OROCHI_STAGE_3_ID: "Battle of Kawanakajima",
    OROCHI_STAGE_4_ID: "Battle of He Fei",
    OROCHI_STAGE_5_ID: "Battle of Edo Castle",
    OROCHI_STAGE_6_ID: "Battle of Yi Ling",
    OROCHI_STAGE_7_ID: "Battle of Mikatagahara",
    OROCHI_STAGE_8_ID: "Battle of Hinokawa",
    DREAM_STAGE_1_ID: "Battle of Osaka Castle",
    DREAM_STAGE_2_ID: "Battle of Fan Castle",
    DREAM_STAGE_3_ID: "Battle of He Fei Castle",
    DREAM_STAGE_4_ID: "Escape from Itsukushima",
    DREAM_STAGE_5_ID: "Battle of Mount Qi",
    DREAM_STAGE_6_ID: "Showdown at Odawara Castle",
    DREAM_STAGE_7_ID: "Battle of the Wu Territory",
    DREAM_STAGE_8_ID: "Showdown in Yamatai",
    DREAM_STAGE_9_ID: "Battle of Jing Province",
    DREAM_STAGE_10_ID: "Battle of Xin Castle",
    DREAM_STAGE_11_ID: "Rescue at Nan Zhong",
    DREAM_STAGE_12_ID: "Struggle for Nan Zhong",
    DREAM_STAGE_13_ID: "Encounter in Ji Province",
    DREAM_STAGE_14_ID: "Battle of Osaka Bay",
    DREAM_STAGE_15_ID: "Battle of Han Sui",
    DREAM_STAGE_16_ID: "Battle of Ueda Castle",
    DREAM_STAGE_17_ID: "Battle of Kyushu",
    DREAM_STAGE_18_ID: "Battle of Honnoji",
    DREAM_STAGE_19_ID: "Showdown at Hinokawa",
    DREAM_STAGE_20_ID: "Battle of Mai Castle",
    DREAM_STAGE_21_ID: "Battle of Shikoku",
    DREAM_STAGE_22_ID: "Battle of Xia Pi",
    DREAM_STAGE_23_ID: "Battle of Chen Cang",
    DREAM_STAGE_24_ID: "Battle of Lu Shan",
    DREAM_STAGE_25_ID: "Battle of Chang Sha",
    DREAM_STAGE_26_ID: "Encounter at Nan Zhong",
    DREAM_STAGE_27_ID: "Battle of Yan Province",
    DREAM_STAGE_28_ID: "Battle of Hasedo"
}



// $3B0094: (24-bit) Character Choices
//          
//          First, second, and third character.   Works in game.
//          
//          0x00 = Zhao Yun
//          0x01 = Guan Yu
//          0x02 = Zhang Fei
//          0x03 = Xiahou Dun
//          0x04 = Dian Wei
//          0x05 = Xu Zhu
//          0x06 = Zhou Yu
//          0x07 = Lu Xun
//          0x08 = Taishi Ci
//          0x09 = Diao Chan
//          0x0A = Zhuge Liang
//          0x0B = Cao Cao
//          0x0C = Lu Bu
//          0x0D = Sun Shang Xiang
//          0x0E = Liu Bei
//          0x0F = Sun Jian
//          0x10 = Sun Quan
//          0x11 = Dong Zhuo
//          0x12 = Yuan Shao
//          0x13 = Ma Chao
//          0x14 = Huang Zhong
//          0x15 = Xiahou Yuan
//          0x16 = Zhang Liao
//          0x17 = Sima Yi
//          0x18 = Lu Meng
//          0x19 = Gan Ning
//          0x1A = Jiang Wei
//          0x1B = Zhang Jiao
//          0x1C = Xu Huang
//          0x1D = Zhang He
//          0x1E = Zhen Ji
//          0x1F = Huang Gai
//          0x20 = Sun Ce
//          0x21 = Wei Yan
//          0x22 = Pang Tong
//          0x23 = Meng Huo
//          0x24 = Zhu Rong
//          0x25 = Da Qiao
//          0x26 = Xiao Qiao
//          0x27 = Cao Ren
//          0x28 = Zhou Tai
//          0x29 = Yue Ying
//          0x2A = Cao Pi
//          0x2B = Pang De
//          0x2C = Ling Tong
//          0x2D = Guan Ping
//          0x2E = Xing Cai
//          0x2F = Zuo Ci
//          0x30 = Yukimura Sanada
//          0x31 = Keiji Maeda
//          0x32 = Nobunaga Oda
//          0x33 = Mitsuhide Akechi
//          0x34 = Goemon Ishikawa
//          0x35 = Kenshin Uesagi
//          0x36 = Oichi
//          0x37 = Okuni
//          0x38 = Kunoichi
//          0x39 = Magoichi Saika
//          0x3A = Shingen Takeda
//          0x3B = Masamune Date
//          0x3C = No
//          0x3D = Hanzo Hattori
//          0x3E = Ranmaru Mori
//          0x3F = Hideyoshi Hashiba
//          0x40 = Yoshimoto Imagawa
//          0x41 = Tadakatsu Honda
//          0x42 = Ina
//          0x43 = Ieyasu Tokugawa
//          0x44 = Mitsunari Ishida
//          0x45 = Nagamasa Azai
//          0x46 = Sakon Shima
//          0x47 = Yoshihiro Shimazu
//          0x48 = Ginchiyo Tachibana
//          0x49 = Kanetsugu Naoe
//          0x4A = Nene
//          0x4B = Kotama Fuma
//          0x4C = Musashi Miyamoto
//          0x4D = Orochi
//          0x4E = Da Ji
//          0x4F = Taigong Wang
//          0x50 = Sun Wukong
//          0x51 = Fu Xi
//          0x52 = Nu Wa
//          0x53 = Yoshitsune Minamoto
//          0x54 = Kiyomori Taira
//          0x55 = Himiko
//          0x56 = Toshiie Maeda
//          0x57 = Motochika Chosokabe
//          0x58 = Gracia
//          0x59 = Kojiro Sasaki
//          0x5A = Katsuie Shibata
//          0x5B = Orochi X
//          0x5C = Dodomeki
//          0x5D = Gyuki
//          0x5E = No Character
//          0x5F = No Character
function characterChoices() => tbyte(0x3B0094)

// $3B0324: (8-bit) Phase
//          
//          0x02 = Main Menu
//          0x04 = Character Selection through stage selection
//          0x05 = Text before battle (Text after appears to be 0x0a)
//          0x06 = Setting up stage
//          0x07 = Won Ending
//          0x07 Won Level Survival
//          0x08 = Lost stage (defeat)
//          0x09 = Failure Survival Mode (flashes to 0x3b before this I believe)
//          0x0a = Won level
//          0x1c = Stage Gameplay
//          0x1f = Stage Gameplay
//          0x27 = Survival Gameplay
//          0x28 = Survival Intro
//          0x3b = Transition
//          0x39 = Demo screen, but likely in game is possible (1b has been seen as Demo also)
//          
//          Appears above 0x10 is "stage gameplay" But transition 0x3b is always before 0x0a  However Transition happens often when changing screens.  0x3b also is movie and main menu
function gamePhase() => byte(0x3B0324)

TRANSITION_VALUE = 0x3b
FINISHED_STAGE_VALUE = 0x0a
FINISHED_SURVIVAL_VALUE = 0x09
LOST_STAGE_VALUE = 0x08
CHANGE_CHARACTER_SCREEN_VALUE = 0x04
function stageWon() => gamePhase() == FINISHED_STAGE_VALUE && prev(gamePhase()) == TRANSITION_VALUE
function survivalFinished() => gamePhase() == FINISHED_SURVIVAL_VALUE && prev(gamePhase()) == TRANSITION_VALUE
function changeCharacterScreen() => gamePhase() == CHANGE_CHARACTER_SCREEN_VALUE 

// $52C254: (8-bit) Zhao Yun Level
//          
//          Note: Exp is not related to this and manipulation of this with out that will create graphical errors.
ZHAO_YUN_LEVEL_MEMORY_LOCATION = 0x52C254
GUAN_YU_LEVEL_MEMORY_LOCATION = 0x52C32C
CHARACTER_SIZE = GUAN_YU_LEVEL_MEMORY_LOCATION - ZHAO_YUN_LEVEL_MEMORY_LOCATION 
function zhaoYunsLevel() => byte(0x52C254)

// $52C255: (8-bit) Zhao's Weapon Selection
//          Which weapon is chosen.
function zhaoYunsChosenWeapon() => byte(0x52C255)

// $52C262: (16-bit) Zhao Yun's Proficiency
//          
//          Level 1 = 0x00
//          Every 1,000 is a new level.
//          Level 49 = 49000/0xBF68
MAX_PROFICIENCY_VALUE = 0xBF68
ZHAO_YUN_PROFICIENCY_MEMORY_LOCATION = 0x52C262
function zhaoYunProficiency() => word(0x52C262)

// $52C268: (192-bit) Zhao Yun's First Weapon Data
//          
//          0x18e = No weapon
//          0x170 = Highest weapon?
//          Higher than 0x18e gets into other names like Sun Wong's army. But no power.
//          
//          16-bit Weapon type/name/base attack/Tier
//          
//          Note Zhao Yun's 0x10-0x13. However if you change to 0x03 You get The Zhao Yun's spear but see the Zhao Yun's model.
//          
//          Formula appears to be character number *4 through character number *4 + 3  so Zhao Yun is 0x00-0x03  Katsuie Shibata is 0x5a  So his numbers become 0x168-0x16b
ZHAO_YUN_FIRST_WEAPON_MEMORY_LOCATION = 0x52C268
ZHAO_YUN_SECOND_WEAPON_MEMORY_LOCATION = 0x52C280
WEAPON_SIZE = ZHAO_YUN_SECOND_WEAPON_MEMORY_LOCATION - ZHAO_YUN_FIRST_WEAPON_MEMORY_LOCATION
WEAPON_OFFSET = ZHAO_YUN_FIRST_WEAPON_MEMORY_LOCATION - ZHAO_YUN_LEVEL_MEMORY_LOCATION
TOTAL_WEAPON_SLOTS = 8
function zhaoYunFirstWeapon() => word(0x52C268)

// $52C280: (192-bit) Zhao Yun's Second Weapon Data
//          
//          0x18e = No weapon
//          0x170 = Highest weapon?
//          Higher than 0x18e gets into other names like Sun Wong's army. But no power.
//          
//          16-bit Weapon type/name/base attack/Tier
//          
//          Note Zhao Yun's 0x10-0x13. However if you change to 0x03 You get The Zhao Yun's spear but see the Zhao Yun's model.
function zhaoYunSecondWeapon() => word(0x52C280)

// $52C310: (8-bit) Zhao Yun's Last weapon (8th) Id
function zhaoYunEightWeapon() => byte(0x52C310)

// $52C328: (bitfield) Zhao Yun's Ability AcquiredI
//          
//          bit0 = First Ability earned.
//          bit1 = Second ability earned
//          bit2 = Third ability earned
//          bit3 = Four ability earned
ZHAO_YUN_ABILITY_MEMORY_LOCATION = 0x52C328
ABILITY_MEMORY_OFFSET = ZHAO_YUN_ABILITY_MEMORY_LOCATION - ZHAO_YUN_LEVEL_MEMORY_LOCATION
function zhaoYunAbilitieAcquired() => byte(0x52C328)

// $52C329: (bitfield) Zhao Yun's Availability
//          
//          bit0 = Shu
//          bit1 = Wei
//          bit2 = Wu
//          bit3 = Samurai
//          bit4 = Orochi
//          bit5 = Free mode.
//          bit6 = Gets set unsure what, maybe "After finishing the levels. "
ZHAO_YUN_UNLOCKED_MEMORY_LOCATION = 0x52C329
UNLOCKED_MEMORY_OFFSET = ZHAO_YUN_UNLOCKED_MEMORY_LOCATION - ZHAO_YUN_LEVEL_MEMORY_LOCATION
function zhaoYunUnlocked() => byte(0x52C329)

// $52C32C: (8-bit) Guan Yu's (Second character) Level
function guanYuLevel() => byte(0x52C32C)

// $52C5B4: (8-bit) Dian Wei Level
//          
//          Note: Exp is not related to this and manipulation of this with out that will create graphical errors.
function dianWeiLevel() => byte(0x52C5B4)

// $5311B8: (32-bit) Shu Chapter 1 Time Record
//          
//          In Frames (60 per second)
function shuChapter1TimeRecord() => dword(0x5311B8)

// $5311BC: (32-bit) Shu Chapter 1 Ko Record
//          
//          Anything over 9999 shows 9999
function shuChapter1KORecord() => dword(0x5311BC)

// $5311C0: (8-bit) Shu Chapter 1 Visible Flag
//          
//          0x00 = Not Visible
//          0x01 = Visible
//          0x02 = Visibile (unknown why higher is seen)
SHU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION = 0x5311C0
function shuChapter1VisibilityFlag() => byte(0x5311C0)

NOT_VISIBLE_VALUE = 0x00
function checkUnlock(memory_location)
{
    return byte(memory_location) != NOT_VISIBLE_VALUE && prev(byte(memory_location)) == NOT_VISIBLE_VALUE
}


// $5311C1: (bitfield) Shu Chapter 1 complete flags
//          
//          bit0 = Easy
//          bit1 = Normal
//          bit2 = Hard
//          bit3 = Chaos
SHU_CHAPTER_1_COMPLETE_MEMORY_LOCATION = 0x5311C1
STAGE_COMPLETE_MEMORY_LOCATION_OFFSET = SHU_CHAPTER_1_COMPLETE_MEMORY_LOCATION - SHU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION
function shuChapter1CompleteFlag() => byte(0x5311C1)

// $5311CC: (8-bit) Shu Chapter 2 VIsible Flag
//          
//          0x00 = Not Visible
//          0x01 = Visible
//          0x02 = Visibile (unknown why higher is seen)
SHU_CHAPTER_2_VISIBILITY_MEMORY_LOCATION = 0x5311CC
STAGE_SIZE = SHU_CHAPTER_2_VISIBILITY_MEMORY_LOCATION - SHU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION
function shuChapter2VisiblityFlag() => byte(0x5311CC)

// $531220: (8-bit) Wei Chapter 1 Visible Flag
//          
//          0x00 = Not Visible
//          0x01 = Visible
//          0x02 = Visibile (unknown why higher is seen)
WEI_CHAPTER_1_VISIBILITY_MEMORY_LOCATION = 0x531220
function weiChapter1VisibilityFlag() => byte(0x531220)

// $531280: (8-bit) Wu Chapter 1 Visible Flag
//          
//          0x00 = Not Visible
//          0x01 = Visible
//          0x02 = Visibile (unknown why higher is seen)
WU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION = 0x531280
function wuChapter1VisibilityFlag() => byte(0x531280)

// $5312E0: (8-bit) SW Chapter 1 Visible Flag
//          
//          0x00 = Not Visible
//          0x01 = Visible
SW_CHAPTER_1_VISIBILITY_MEMORY_LOCATION = 0x5312E0
function swChapter1VisibilityFlag() => byte(0x5312E0)

// $531340: (8-bit) Orochi Chapter 1 Visible Flag
//          
//          0x00 = Not Visible
//          0x01 = Visible
//          0x02 = Visibile (unknown why higher is seen)
OROCHI_CHAPTER_1_VISIBILITY_MEMORY_LOCATION = 0x531340
function OrochiChapter1VisibilityFlag() => byte(0x531340)

// $5313A0: (8-bit) Dream Mode Stage 1 Visible Flag
//          
//          0x00 = Not Visible
//          0x01 = Visible
//          0x02 = Visibile (unknown why higher is seen)
DREAM_1_MEMORY_LOCATION = 0x5313A0
function dreamModeStage1VisibilityFlag() => byte(0x5313A0)

// $531504: (32-bit bitfield) Treasures
//          
//          bit0 = Obsidian
//          bit1 = Jade
//          bit2 = Amber
//          bit3 = Fluorite
//          bit4 = Silver
//          bit5 = Agate
//          bit6 = Diamond
//          bit7 = Malachite
//          bit8 = Crystal
//          bit9 = Sapphire
//          bit10 = Ruby
//          bit11 = Amethyst
//          bit12 = Moonstone
//          bit13 = Emerald
//          bit14 = Pearl
//          bit15 = Onyx
//          bit16 = Garnet
//          bit17 = Aventurine
//          bit18 = Carnelian
//          bit19 = Opal
//          bit20 = Topaz
//          bit21 = Phoenix Wing
//          bit22 = Dragon's Spleen
//          bit23 = Lion's Fang
//          bit24 = Chimera Shell
//          bit25 = Jeweled Branch
//          bit26 = Bowl of Buddha
//          bit27 = Fire Rat's Skin
//          bit28 = Swallow's Shell
//          bit29 = Dragon's Jewel
TREASURE_BITFIELD_MEMORY_LOCATION = 0x531504
function treasureBit(bitValue) => bit(bitValue, TREASURE_BITFIELD_MEMORY_LOCATION)
function treasureBitfield() => dword(0x531504)

// $531531: (8-bit) Difficutly Level
//          
//          0x00 = Easy
//          0x01 = Normal
//          0x02 = Hard
//          0x03 = Chaos
function difficultyLevel() => byte(0x531531)
CHAOS_VALUE = 0x03
function chaosDifficulty() => difficultyLevel() == CHAOS_VALUE

// $531828: (8-bit) Game Mode
//          
//          0x00 = Story Mode
//          0x01 = Free Mode
//          0x02 = Dream mode
//          0x03 = Vs Mode
//          0x04 = Survival Mode
//          0x05 = Gallery
//          0x06 = Options
//          0x0c = Main Menu and mode selection
function gameMode() => byte(0x531828)
STORY_MODE_VALUE = 0x00
FREE_MODE_VALUE = 0x01
DREAM_MODE_VALUE = 0x02
VERSUS_MODE_VALUE = 0x03
SURVIVAL_MODE_VALUE = 0x04
MAIN_MENU_VALUE = 0x0c
function storyMode() => gameMode() == STORY_MODE_VALUE
function freeMode() => gameMode() == FREE_MODE_VALUE
function storyOrFreeMode() => (storyMode() || freeMode())
function dreamMode() => gameMode() == DREAM_MODE_VALUE
function versusMode() => gameMode() == VERSUS_MODE_VALUE
function survivalMode() => gameMode() == SURVIVAL_MODE_VALUE
function mainMenu() => gameMode() == MAIN_MENU_VALUE

// $531830: (8-bit) Map ID
//          
//          0x00 = Shu State 1
//          0x01 = Shu State 2
//          0x08 = Wei Stage 1
//          0x10 = Wu Stage 1
//          0x18 = SW Stage 1
//          0x20 = Orochi Stage 1
//          0x28 = Dream Stage 1
function mapID() => byte(0x531830)

storyStageLookup =
{
    SHU_STAGE_1_ID: "Shu", 
    WEI_STAGE_1_ID: "Wei",
    WU_STAGE_1_ID: "Wu",
    SW_STAGE_1_ID:"SW",
    OROCHI_STAGE_1_ID: "Orochi"
}
STORY_STAGES = [SHU_STAGE_1_ID, 
                WEI_STAGE_1_ID, 
                WU_STAGE_1_ID, 
                SW_STAGE_1_ID, 
                OROCHI_STAGE_1_ID]



// $531838: (8-BIT) Two player control
//          
//          If second player is playing, this will be 2.  Controls how many "cameras" are working  in gameplay.
function twoPlayerControl() => byte(0x531838)
TWO_PLAYER_VALUE = 0x02
function twoPlayer() => twoPlayerControl() == TWO_PLAYER_VALUE

// $53184c: (8-bit) First Character Index
function firstCharacterIndex() => byte(0x53184c)

// $531874: (8-bit) Second Character Index
function secondCharacterIndex() => byte(0x531874)

// $53189c: (8-bit) Third Character Index
function thirdCharacterIndex() => byte(0x53189c)


// $5e0fc0: (16-bit) Total KOs 
//
//          Calculated Total KO, this is NOT a control, but it's based on the number of kills for each general  (1's count + 2's count + 3's count) 
function koForFirstPlayer() => word(0x5e0fc0)

// Is only for the first character. 
// $531868: (32-bit) KO Count for First Character
//          
//          Any number over 9999 is just shown as 9999
function failedKoForFirstPlayer() => dword(0x531868)

// $531B1C: (32-bit) Current Time in level
function timeInLevel() => dword(0x531B1C)
// Check the first frame.
function startStage() => timeInLevel() == 1 && prev(timeInLevel()) == 0

// $531B20: (32-bit) Target time
//          
//          In Demo mode it's 0e10 or so.  In regular level it appears to be above 0x030000
function targetTime() => dword(0x531B20)
DEMO_MODE_TARGET_TIME_VALUE = 0x0e10
// Going to give it a little more just in case I missed something. 
function demoMode() => targetTime() <= DEMO_MODE_TARGET_TIME_VALUE * 10

// $531b40: (8-bit) Survivial Win Count 
// 
//          0x01 = 0 Wins
//          0x02 = 1 Win. 
//
//          All values after this is one higher than the win counts. 
function survivalCount() => byte(0x00531b40)

function saveProtection()
{
    // hope this works as save protection.  It should (But can be disabled for some testing) 
    return gamePhase() == FINISHED_STAGE_VALUE
}

function saveProtectionCanLose()
{
    // For Grand Master/Proficiency, the game saves the proficiency after winning or losing the stage
    return gamePhase() == FINISHED_STAGE_VALUE || 
           (gamePhase() == TRANSITION_VALUE && 
            prior(gamePhase()) == LOST_STAGE_VALUE)
}


STAGE_COMPLETE_STRING = "Complete the {0} stage {1} as a single player"
function storyStageCompleteAndLeaderboards(stageID, group, index) 
{
    achievement(title = stageNameLookup[stageID],
                description = format(STAGE_COMPLETE_STRING, storyStageLookup[group], index + 1),
                points = 3,
                trigger = stageWon() && 
                          mapID() == stageID && 
                          !twoPlayer() && 
                          !demoMode() && 
                          storyOrFreeMode(),
                type = "Progression"
                )
    
    leaderboard(
        title = format("Most Kills on {0}",  stageNameLookup[stageID]),
        description = format("Get the most kills on {0} stage {1} and win the scenario as a single player", storyStageLookup[group], index + 1),
        start = 
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            storyOrFreeMode() &&
            timeInLevel() != 00
        ),
        cancel = always_false(),
        submit = always_true(),
        value = koForFirstPlayer(),
        format = "VALUE"
    )

    leaderboard(
        title = format("Fastest Run on {0}", stageNameLookup[stageID]),
        description = format("Get through the {0} stage {1} the fastest as a single player", storyStageLookup[group], index + 1),
        
        start  =
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            storyOrFreeMode() &&
            timeInLevel() != 00
        ),
        cancel = always_false(),
        submit = always_true(),
        value = timeInLevel(),
        format = "FRAMES", 
        lower_is_better = true 
    )
    leaderboard(
        title = format("Chaos: Most Kills on {0}",  stageNameLookup[stageID]),
        description = format("Get the most kills on {0} stage {1} and win the scenario on chaos difficulty as a single player",  storyStageLookup[group], index + 1),
        start = 
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            storyOrFreeMode() &&
            timeInLevel() != 00 &&
            chaosDifficulty()
        ),
        cancel = always_false(),
        submit = always_true(),
        value = koForFirstPlayer(),
        format = "VALUE"
    )

    leaderboard(
        title = format("Chaos: Fastest Run on {0}", stageNameLookup[stageID]),
        description = format("Get through the {0} stage {1} the fastest on chaos difficulty as a single player", storyStageLookup[group], index + 1),
        
        start  =
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            storyOrFreeMode() &&
            timeInLevel() != 00 &&
            chaosDifficulty()
        ),
        cancel = always_false(),
        submit = always_true(),
        value = timeInLevel(),
        format = "FRAMES", 
        lower_is_better = true 
    )


}

function dreamStageCompleteAndLeaderboards(stageID, index) 
{
    achievement(title = stageNameLookup[stageID],
                description = format(STAGE_COMPLETE_STRING, "Dream", index + 1),
                points = 3,
                trigger = stageWon() && 
                          mapID() == stageID && 
                          !twoPlayer() && 
                          !demoMode() && 
                          dreamMode()
                )
    leaderboard(
        title = format("Most Kills on {0}",  stageNameLookup[stageID]),
        description = format("Get the most kills on {0} stage {1} and win the scenario as a single player",  "Dream", index + 1),
        start = 
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            dreamMode() &&
            timeInLevel() != 00
        ),
        cancel = always_false(),
        submit = always_true(),
        value = koForFirstPlayer(),
        format = "VALUE"
    )

    leaderboard(
        title = format("Fastest Run on {0}", stageNameLookup[stageID]),
        description = format("Get through the {0} stage {1} the fastest as a single player" ,  "Dream", index + 1),
        
        start  =
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            dreamMode() &&
            timeInLevel() != 00
        ),
        cancel = always_false(),
        submit = always_true(),
        value = timeInLevel(),
        format = "FRAMES", 
        lower_is_better = true 
    )
    leaderboard(
        title = format("Chaos: Most Kills on {0}",  stageNameLookup[stageID]),
        description = format("Get the most kills on {0} stage {1} and win the scenario on chaos difficulty as a single player",   "Dream", index + 1),
        start = 
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            dreamMode() &&
            timeInLevel() != 00 &&
            chaosDifficulty()
        ),
        cancel = always_false(),
        submit = always_true(),
        value = koForFirstPlayer(),
        format = "VALUE"
    )

    leaderboard(
        title = format("Chaos: Fastest Run on {0}", stageNameLookup[stageID]),
        description = format("Get through the {0} stage {1} the fastest on chaos difficulty as a single player",  "Dream", index + 1),
        
        start  =
        (
            stageWon() && 
            mapID() == stageID && 
            !twoPlayer() && 
            !demoMode() && 
            dreamMode() &&
            timeInLevel() != 00 &&
            chaosDifficulty()
        ),
        cancel = always_false(),
        submit = always_true(),
        value = timeInLevel(),
        format = "FRAMES", 
        lower_is_better = true 
    )
}

for group in STORY_STAGES
{
    // Zero-Index
    for index in range(0,TOTAL_STAGE_COUNT - 1)
    {
        storyStageCompleteAndLeaderboards(group + index, group, index)
    }
}

for index in range(0,DREAM_STAGE_COUNT - 1)
{
    dreamStageCompleteAndLeaderboards(DREAM_STAGE_1_ID + index, index)
}

function getChaosCompleteFromVisibleLocation(memory_location, stageIndex)
{
    return bit(3, memory_location + STAGE_COMPLETE_MEMORY_LOCATION_OFFSET + (stageIndex * STAGE_SIZE))
}

function getVisibleMemoryLocation(memory_location, stageIndex)
{
    return memory_location + (stageIndex * STAGE_SIZE)
}

function dreamUnlockAchievement(stageId) 
{
    // Need an offset of DREAM_STAGE_1_ID because stage ID is a 0-th index. 
    correctedStageID = DREAM_STAGE_1_ID + stageId
    achievement(title = format("{0} Unlocked", stageNameLookup[correctedStageID]), 
                description = format("Unlock stage {0} for Dream Mode", stageId + 1),
                points = 5,
                trigger = checkUnlock(getVisibleMemoryLocation(DREAM_1_MEMORY_LOCATION,stageId)) &&
                          saveProtection()
                )
}

for index in range(0,DREAM_STAGE_COUNT - 1)
{
    if(index != 9 && index != 18 && index != 22)
    {
        dreamUnlockAchievement(index)
    }
}


function chaosStoryCampaignComplete(stageMemoryLocation)
{
    achievement(title = format("Chaos {0} Campaign", CampaignNameLookup[stageMemoryLocation]),
                description = format("Complete all stages in the {0} campaign on Chaos difficulty", CampaignNameLookup[stageMemoryLocation]),
                points = 10,
                trigger = saveProtection() && 
                          measured(sum_of(range(0, TOTAL_STAGE_COUNT-1), index => getChaosCompleteFromVisibleLocation(stageMemoryLocation, index)) == 8) &&
                          any_of(range(0, TOTAL_STAGE_COUNT-1), index => prev(getChaosCompleteFromVisibleLocation(stageMemoryLocation, index)) == 0)
                )
}

CampaignNameLookup = {
    SHU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION: "Shu",
    WEI_CHAPTER_1_VISIBILITY_MEMORY_LOCATION: "Wei",
    WU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION: "Wu",
    SW_CHAPTER_1_VISIBILITY_MEMORY_LOCATION: "Samurai Warriors",
    OROCHI_CHAPTER_1_VISIBILITY_MEMORY_LOCATION: "Orochi"
}


function chaosDreamStagesComplete(stageMemoryLocation, firstStageIndex, lastStageIndex, title, description)
{
    achievement(title = title,
                description = description,
                points = 25,
                trigger = saveProtection() && 
                          measured(sum_of(range(firstStageIndex, lastStageIndex), index => getChaosCompleteFromVisibleLocation(stageMemoryLocation, index)) == lastStageIndex - firstStageIndex + 1) &&
                          any_of(range(firstStageIndex, lastStageIndex), index => prev(getChaosCompleteFromVisibleLocation(stageMemoryLocation, index)) == 0)
                )
}

chaosDreamStagesComplete(DREAM_1_MEMORY_LOCATION, 0, 9, "Chaos Dream First Row", "Complete the first 10 Dream Mode stages on Chaos difficulty")
chaosDreamStagesComplete(DREAM_1_MEMORY_LOCATION, 10, 19, "Chaos Dream Second Row", "Complete the second 10 Dream Mode stages on Chaos difficulty")
chaosDreamStagesComplete(DREAM_1_MEMORY_LOCATION, 20, 27, "Chaos Dream Third Row", "Complete the final 8 Dream Mode stages on Chaos difficulty")


for memory_location in [SHU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION, 
                        WEI_CHAPTER_1_VISIBILITY_MEMORY_LOCATION, 
                        WU_CHAPTER_1_VISIBILITY_MEMORY_LOCATION, 
                        SW_CHAPTER_1_VISIBILITY_MEMORY_LOCATION, 
                        OROCHI_CHAPTER_1_VISIBILITY_MEMORY_LOCATION]
{
    chaosStoryCampaignComplete(memory_location)
}

CHAOS_STAGE_COMPLETE_STRING = "Complete the {0} stage {1} on Chaos difficulty without loading an interim save as a single player"

function chaosStoryAchievement(stageId, group, index) 
{
    achievement(title = format("Elite Chaos {0}", stageNameLookup[stageId]),
                description = format(CHAOS_STAGE_COMPLETE_STRING, storyStageLookup[group], index + 1),
                points = 10,
                trigger = once(startStage()) &&
                          trigger_when(stageWon()) && 
                          mapID() == stageId && 
                          !twoPlayer() && 
                          !demoMode() && 
                          storyOrFreeMode() && 
                          chaosDifficulty() &&
                          never(mainMenu())
                )
}

function chaosDreamAchievement(stageId, index) 
{
    achievement(title = format("Elite Chaos {0}", stageNameLookup[stageId]),
                description = format(CHAOS_STAGE_COMPLETE_STRING, "Dream", index + 1),
                points = 10,
                trigger = once(startStage()) &&
                          stageWon() && 
                          mapID() == stageId && 
                          !twoPlayer() && 
                          !demoMode() && 
                          dreamMode() && 
                          chaosDifficulty() &&
                          never(mainMenu())
                )
}

for group in STORY_STAGES
{
    // Zero-Index
    for index in range(0,TOTAL_STAGE_COUNT - 1)
    {
        chaosStoryAchievement(group + index, group, index)
    }
}

for index in range(0,DREAM_STAGE_COUNT - 1)
{
    chaosDreamAchievement(DREAM_STAGE_1_ID + index, index)
}

function treasureCountAchievement(treasureCount, title, description, points)
{
    achievement(title = title,
                description = description,
                points = points,
                trigger = measured(sum_of(range(0,29), index => treasureBit(index)) == treasureCount) &&
                          sum_of(range(0,29), index => prev(treasureBit(index))) == treasureCount - 1 &&
                          saveProtection()                          
                )
}

treasureCountAchievement(10, "Treasure Searcher", "Collect 10 treasures", 5)
treasureCountAchievement(20, "Treasure Collector", "Collect 20 treasures", 10)
treasureCountAchievement(30, "Treasure Hoarder", "Collect all 30 treasures", 25)

function survivalAchievement(winCount, title, description, points)
{
    achievement(title = title,
                description = description,
                points = points,
                trigger = survivalCount() == winCount + 1 &&
                          prev(survivalCount()) == winCount &&
                          !demoMode() &&
                          survivalMode()
                )
}

survivalAchievement(10, "Survivor Man", "Win at least 10 matches in a row in Survival Mode", 5)
survivalAchievement(25, "Survivor Hero", "Win at least 25 matches in a row in Survival Mode", 10)
survivalAchievement(50, "Survivor God", "Win at least 50 matches in a row in Survival Mode", 25)

leaderboard(
    title = format("Survival Wins"),
    description = format("Win as many rounds of Survival as possible. Changing characters will not register your current wins"),
    
    start  =
    ( 
        prev(gameMode()) == SURVIVAL_MODE_VALUE &&
        survivalCount() > 0x01 && // More than 0 wins. 
        (
            changeCharacterScreen() ||
            !survivalMode() ||
            survivalFinished() // This also resets the wins to 0. 
        )
    ),
    cancel = always_false(),
    submit = always_true(),
    value = survivalCount() - 1,
    format = "VALUE"
)
    
function weaponAchievement(characterID)
{
    TOTAL_WEAPON_PER_CHARACTER = 4
    OFFSET_FOR_FOURTH_WEAPON = 3
    targetWeaponID = characterID * TOTAL_WEAPON_PER_CHARACTER + OFFSET_FOR_FOURTH_WEAPON
    achievement(title = weaponNameLookup[characterID],
                description = format("Acquire a {0} for {1}.  Weapon must be placed in a weapon slot that didn't already contain a {0} and in single player", weaponNameLookup[characterID], characterNameLookup[characterID]),
                points = 5,
                trigger = any_of(range(0, TOTAL_WEAPON_SLOTS - 1), index => word(ZHAO_YUN_FIRST_WEAPON_MEMORY_LOCATION + (characterID * CHARACTER_SIZE) + (index * WEAPON_SIZE)) == targetWeaponID &&
                                                                            prev(word(ZHAO_YUN_FIRST_WEAPON_MEMORY_LOCATION + (characterID * CHARACTER_SIZE) + (index * WEAPON_SIZE))) != targetWeaponID ) &&
                          saveProtection()
                )
}

for characterID in range(FIRST_CHARACTER, LAST_WEAPON_CHARACTER)
{
    weaponAchievement(characterID)
}

function abilityAchievement(characterID)
{
    achievement(title = format("Master {0}", characterNameLookup[characterID]),
                description = format("Acquire all abilities for {0}", characterNameLookup[characterID]),
                points = 5,
                trigger = byte(ZHAO_YUN_ABILITY_MEMORY_LOCATION + (characterID * CHARACTER_SIZE)) == abilityLookup[characterID] &&
                          prev(byte(ZHAO_YUN_ABILITY_MEMORY_LOCATION + (characterID * CHARACTER_SIZE))) != abilityLookup[characterID] &&
                          saveProtection()
                )
}

for characterID in range(FIRST_CHARACTER, LAST_ABILITY_CHARACTER)
{
    abilityAchievement(characterID)
}

function proficiencyAchievement(characterID)
{
    achievement(title = format("Grand Master {0}", characterNameLookup[characterID]),
                description = format("Raise {0}'s proficiency to max", characterNameLookup[characterID]),
                points = 10,
                trigger = word(ZHAO_YUN_PROFICIENCY_MEMORY_LOCATION + (characterID * CHARACTER_SIZE)) >= MAX_PROFICIENCY_VALUE&&
                          prev(word(ZHAO_YUN_PROFICIENCY_MEMORY_LOCATION + (characterID * CHARACTER_SIZE))) < MAX_PROFICIENCY_VALUE &&
                          saveProtectionCanLose()
                )
}

for characterID in range(FIRST_CHARACTER, LAST_PROFICIENCY_CHARACTER)
{
    proficiencyAchievement(characterID)
}


rich_presence_conditional_display(demoMode(), "In the menus")

rich_presence_conditional_display(versusMode(), "In Versus Mode")

rich_presence_conditional_display(dreamMode() && !changeCharacterScreen(), "Dream Mode: {0}, {1}, and {2} fighting in {3} ",
                                  rich_presence_lookup("CharacterNameLookup", firstCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", secondCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", thirdCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("LevelLookup", mapID(), stageNameLookup))

rich_presence_conditional_display(freeMode() && !changeCharacterScreen(), "Free Mode: {0}, {1}, and {2} fighting in {3} ",
                                  rich_presence_lookup("CharacterNameLookup", firstCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", secondCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", thirdCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("LevelLookup", mapID(), stageNameLookup))

rich_presence_conditional_display(storyMode() && !changeCharacterScreen(), "Story Mode: {0}, {1}, and {2} fighting in {3} ",
                                  rich_presence_lookup("CharacterNameLookup", firstCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", secondCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", thirdCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("LevelLookup", mapID(), stageNameLookup))


rich_presence_conditional_display(survivalMode() && !changeCharacterScreen(), "Survival Mode: {0}, {1}, and {2}  Wins: {3}",
                                  rich_presence_lookup("CharacterNameLookup", firstCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", secondCharacterIndex(), characterNameLookup), 
                                  rich_presence_lookup("CharacterNameLookup", thirdCharacterIndex(), characterNameLookup), 
                                  rich_presence_value("Number", survivalCount() - 1))

// Everyone else.
rich_presence_display("In the menus") 